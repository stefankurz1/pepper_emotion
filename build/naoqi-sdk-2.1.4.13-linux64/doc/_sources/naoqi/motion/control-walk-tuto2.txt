.. _control-walk-tuto2:

Locomotion control Tutorial: The Robot Position
===============================================

:ref:`naoqi-motion` - :ref:`Overview <control-walk>` | :ref:`API <control-walk-api>` |
robot position Tutorial

------------

Introduction
------------

This tutorial explains how to use the robotPosition and getFootSteps API. Both
these API will help you to have a better control on the walk algorithm.


.. note::

   The tutorial is written in Python.


.. _control-walk-tuto2-download:

Download
--------

You can download the robot position example here:
:download:`almotion_robotPosition.py
</examples/python/motion/almotion_robotPosition.py>`

If the matplotlib module is found, it will be used for plotting data:
http://matplotlib.sourceforge.net/.

For python-related troubleshooting, see: :ref:`python-install-guide`.

Code review
-----------

In this section we describe each important piece of code of the example.

NAOqi tools
+++++++++++

First, we import some external modules:
 - config: custom module with helper functions
 - motion: constant definitions such as SPACE.
 - math: the standard python mathematic library useful for cos, sinus ...
 - almath: an optimized mathematic toolbox for robotics.
   For further details, see: `libalmath API reference
   <../../ref/libalmath/index.html>`_.
 - pylab: matplotlib useful for plotting data (http://matplotlib.sourceforge.net/).

.. literalinclude:: /examples/python/motion/almotion_robotPosition.py
  :language: python
  :end-before: def main():


Initialization of the robot
++++++++++++++++++++++++++++


Then, the proxy to **ALMotion** module is created. This proxy is needed to
call the **ALMotion** API.
Set stiffness into the joint and execute a PoseInit.

.. literalinclude:: /examples/python/motion/almotion_robotPosition.py
  :language: python
  :pyobject: main
  :end-before: # end init, begin experiment

The experiment
++++++++++++++

We send a first walk command and, few seconds later, a second one.

We can see the difference between unchangeable and changeable foot steps. The
second walk command is executed after the unchangeable foot generated by the
first walk command.


.. literalinclude:: /examples/python/motion/almotion_robotPosition.py
  :language: python
  :start-after: # end init, begin experiment
  :end-before: # end experiment, begin compute


Compute robot move
++++++++++++++++++

Here, using walk API, we compute the move made by the robot. The goal is to find the
value of the second walk command.

The robot begins the second walk command after the first command unchangeable foot step.
In this case the robot position is the result of nextRobotPosition.

Then, we wait the end of the walk process (waitUntilMoveIsFinished) and we get the final robot
position.

The distance is equivalent to:

:math:`(nextRobotPosition)^{-1}*robotPositionFinal`.

And the result should be [0.3, 0.0, -0.5]

.. literalinclude:: /examples/python/motion/almotion_robotPosition.py
  :language: python
  :start-after: # end experiment, begin compute
  :end-before: end compute, begin plot


Print Result
++++++++++++

We use matplotlib function to print the foot step result of the experience.

Functions printRobotPosition and printFootSteps are defined in the
:download:`almotion_robotPosition.py </examples/python/motion/almotion_robotPosition.py>`
file.

.. literalinclude:: /examples/python/motion/almotion_robotPosition.py
  :language: python
  :start-after: # end compute, begin plot
  :end-before: # end plot

This first figure represents the result of the first walk command:

.. image:: /medias/dev/modules/motion/motion_robotPositionLegend1.png
   :width: 187 px
   :height: 80 px

.. image:: /medias/dev/modules/motion/motion_robotPosition1.png
   :width: 420 px
   :height: 313 px

The second one shows the effect of the second walk command. We see that
unchangeable footStep of the first command will be executed before
the second command:

.. image:: /medias/dev/modules/motion/motion_robotPositionLegend2.png
   :width: 187 px
   :height: 80 px

.. image:: /medias/dev/modules/motion/motion_robotPosition2.png
   :width: 420 px
   :height: 313 px
